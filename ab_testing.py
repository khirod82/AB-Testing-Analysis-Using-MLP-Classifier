# -*- coding: utf-8 -*-
"""AB Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xqtedcfnZdTIlMPxNwPri5FCn9mh3wb
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.impute import SimpleImputer

df = pd.read_csv('/content/ab_testing.csv')
df.head()

df.shape

# Preprocess the data
# 1. Convert 'Group' to numerical labels
le = LabelEncoder()
df['Group'] = le.fit_transform(df['Group'])

# 2. Convert 'Device' and 'Location' to numerical labels
df['Device'] = le.fit_transform(df['Device'])
df['Location'] = le.fit_transform(df['Location'])

# 3. Convert 'Conversion' to numerical (assuming 'Yes'/'No' values)
# Ensure this is executed *before* defining X and splitting the data
df['Conversion'] = df['Conversion'].map({'Yes': 1, 'No': 0})

# Define features (X) and target (y)
X = df[['Page Views', 'Time Spent', 'Conversion', 'Device', 'Location']]
y = df['Group']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Impute missing values using SimpleImputer before splitting data
imputer = SimpleImputer(strategy='mean') # or 'median', 'most_frequent'
X = imputer.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale numerical features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize and train the MLP classifier
mlp = MLPClassifier(hidden_layer_sizes=(10, 5), max_iter=1000, random_state=42)
mlp.fit(X_train, y_train)

# Make predictions
y_pred = mlp.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))